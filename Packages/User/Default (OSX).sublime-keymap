// show commands entered
//   Open console (ctrl+~)
//   sublime.log_commands(True)

[
	// movement in command mode
	// up
	{
		"keys": ["e"],
		"command": "set_motion",
		"args": {
			"motion": "move",
			"motion_args": {"by": "lines", "extend": true, "forward": false }
		},
		"context": [{ "key": "setting.command_mode" }]
	},
	// down
	{
		"keys": ["n"],
		"command": "set_motion",
		"args": {
			"motion": "move",
			"motion_args": {"by": "lines", "extend": true, "forward": true }
		},
		"context": [{ "key": "setting.command_mode" }]
	},
	// left
	{
		"keys": ["h"],
		"command": "set_motion",
		"args": {
			"motion": "move",
			"motion_args": {"by": "characters", "extend": true, "forward": false },
		},
		"context": [{ "key": "setting.command_mode" }]
	},
	// right
	{
		"keys": ["i"],
		"command": "set_motion",
		"args": {
			"motion": "move",
			"motion_args": {"by": "characters", "extend": true, "forward": true },
		},
		"context": [{ "key": "setting.command_mode" }]
	},

	// shift movement in command mode
	// up
	{
		"keys": ["E"],
		"command": "move",
		"args": { "by": "lines", "forward": false, "extend": true },
		"context": [{ "key": "setting.command_mode" }]
	},
	// down
	{
		"keys": ["N"],
		"command": "move",
		"args": {"by": "lines", "forward": true, "extend": true },
		"context": [{ "key": "setting.command_mode" }]
	},
	// left
	{
		"keys": ["H"],
		"command": "move",
		"args": {"by": "characters", "forward": false, "extend": true },
		"context": [{ "key": "setting.command_mode" }]
	},
	// right
	{
		"keys": ["I"],
		"command": "move",
		"args": {"by": "characters", "forward": true, "extend": true },
		"context": [{ "key": "setting.command_mode" }]
	},

	// page movement in command mode
	// up
	{
		"keys": ["super+e"],
		"command": "vi_scroll_lines",
		"args": { "forward": false },
		"context": [{ "key": "setting.command_mode" }]
	},
	// down
	{
		"keys": ["super+n"],
		"command": "vi_scroll_lines",
		"context": [{ "key": "setting.command_mode" }]
	},

	// move to word end (mimic original Vim behavior)
	{
		"keys": ["E"],
		"command": "set_motion",
		"context": [{ "key": "setting.command_mode" }],
		"args": {
			"motion": "move",
			"motion_args": {
				"by": "subword_ends",
				"forward": true,
				"extend": true
			}
		},
	},

	// move to word end (mimic original Vim behavior)
	{
		"keys": ["N"],
		"command": "set_motion",
		"context": [{ "key": "setting.command_mode" }],
		"args": {
			"motion": "move",
			"motion_args": {
				"by": "subword_ends",
				"forward": false,
				"extend": true
			}
		},
	},


	// move by 5 lines at a time in command mode
	// Plugin dependency: Preferences/User/Move_caret_forwardCommand.py
	/*{
		"keys": ["E"],
		"command": "move_multi",
		"args": { "by": "lines", "amount": -5 },
		"context": [{ "key": "setting.command_mode" }]
	},*/

	// move up or down by 5 lines in insert mode
	{
		"keys": ["super+shift+e"],
		"command": "move_multi",
		"args": { "by": "lines", "amount": -5 },
		"context": [{ "key": "setting.command_mode", "operand": false }]
	},
	{
		"keys": ["super+shift+n"],
		"command": "move_multi",
		"args": { "by": "lines", "amount": 5 },
		"context": [{ "key": "setting.command_mode", "operand": false }]
	},

	// insert (bumped from 'i')
	{
		"keys": ["k"],
		"command": "enter_insert_mode",
		"context": [{ "key": "setting.command_mode" }]
	},

	// escape insert mode
	{
		"keys": ["super+k"],
		"command": "exit_insert_mode",
		"context": [{ "key": "setting.command_mode", "operand": false }]
	},

	// basic movement without leaving insert mode
	{
		"keys": ["super+e"],
		"command": "move",
		"args": { "by": "lines", "forward": false },
		"context": [{ "key": "setting.command_mode", "operand": false }]
	},
	{
		"keys": ["super+n"],
		"command": "move",
		"args": { "by": "lines", "forward": true },
		"context": [{ "key": "setting.command_mode", "operand": false }]
	},
	{
		"keys": ["super+h"],
		"command": "move",
		"args": { "by": "characters", "forward": false },
		"context": [{ "key": "setting.command_mode", "operand": false }]
	},
	{
		"keys": ["super+i"],
		"command": "move",
		"args": { "by": "characters", "forward": true },
		"context": [{ "key": "setting.command_mode", "operand": false }]
	},

	// move by words in insert mode
	{
		"keys": ["super+shift+h"],
		"command": "move",
		"args": { "by": "words", "forward": false }
	},
	{
		"keys": ["super+shift+i"],
		"command": "move",
		"args": { "by": "words", "forward": true }
	},

	// move to beginning of line (INSERT MODE)
	{
		"keys": ["super+0"],
		"command": "move_to",
		"args": { "to": "bol" },
		"context": [{ "key": "setting.command_mode", "operand": false }]
	},

	// move to end of line in (INSERT MODE)
	{
		"keys": ["super+shift+0"],
		"command": "move_to",
		"args": { "to": "eol" },
		"context": [{ "key": "setting.command_mode", "operand": false }]
	},

	// change 0 to go to bol not hardbol (COMMAND MODE)
	{
		"keys": ["0"],
		"command": "set_motion",
		"args": {
			"motion": "move_to",
			"motion_args": {
				"to": "bol" ,
				"extend": "true"
			}
		},
		"context": [
			{ "key": "setting.command_mode" },
			{ "key": "vi_has_repeat_digit", "operand": false }
		]
	},

	// shift+0 mimics $ (COMMAND MODE)
	{
		"keys": [")"],
		"command": "move_to",
		"args": { "to": "eol" },
		"context": [{ "key": "setting.command_mode" }]
	},

	// new tab
	{ "keys": ["super+t"], "command": "new_file" },

	// show files overlay, bumped from super+t
	{ "keys": ["ctrl+/"], "command": "show_overlay", "args": {"overlay": "goto", "show_files": true} },

	// open user key bindings
	{
		"keys": ["super+shift+,"],
		"command": "open_file",
		"args": { "file": "${packages}/User/Default (OSX).sublime-keymap"
		}
	},

	{ "keys": ["super+shift+r"], "command": "quick_file_move" },

	{ "keys": ["super+alt+a"], "command": "alignment" },

	{
		"keys": [";"],
		"command": "single_selection",
		"context": [{ "key": "setting.command_mode" }]
	},
	{ "keys": ["super+;"], "command": "split_selection_into_lines" },

	// move to screen top (bumped from H)
	{
		"keys": ["T"],
		"command": "set_motion",
		"args": {
			"motion": "move_caret_to_screen_top",
			"linewise": true,
			"motion_args": { "repeat": 1 }
		},
		"context": [{ "key": "setting.command_mode" }]
	},

	{ "keys": ["super+alt+h"], "command": "jshint" },
	{ "keys": ["super+alt+h"], "command": "jshint_clear_annotations" },

	// {
	// 	"keys": ["}"],
	// 	"command": "set_motion",
	// 	"args": {
	// 		"motion": "move",
	// 		"motion_args": {
	// 			"by": "stops",
	// 			"empty_line": true,
	// 			"extend": true,
	// 			"forward": true,
	// 			"separators": "",
	// 			"word_begin": false
	// 		}
	// 	}
	// }

	{
		"keys": ["super+alt+o"],
		"command": "find_in_files_goto",
		"context": [{
				"key": "selector",
				"operator": "equal",
				"operand": "text.find-in-files"
		}]
	},

	// Handled by Karabiner
	// {
	// 	"keys": ["super+i"], // Default: Incremental Find
	// 	"command": "next_view"
	// },
	// {
	// 	"keys": ["super+h"],
	// 	"command": "prev_view"
	// },
	//
	// { "keys": ["super+option+i"], "command": "unindent" },
  // { "keys": ["super+option+o"], "command": "indent" }

	{
		"keys": ["super+f"],
		"command": "foo"
	},
	{
		"keys": ["super+b"],
		"command": "indent_and_braces"
	},
	{
		"keys": ["j"],
		"command": "delete_matching_brackets",
		"context": [{ "key": "setting.command_mode" }]
	},

	{
		"keys": ["super+shift+e"],
		"command": "swap_line_up"
	},

	{
		"keys": ["super+shift+n"],
		"command": "swap_line_down"
	},

  { "keys": ["super+shift+option+n"], "command": "git_gutter_next_change" },
	{ "keys": ["super+shift+option+e"], "command": "git_gutter_prev_change" },

	// disable auto_match_enabled only for quotes (insert mode)
	{
		"keys": ["'"],
		"command": "insert",
		"args": {"characters": "'"},
		"context": [{ "key": "setting.command_mode", "operand": false }],
	},
	{
		"keys": ["\""],
		"command": "insert",
		"args": {"characters": "\""},
		"context": [{ "key": "setting.command_mode", "operand": false }],
	},

	// not sure why this isn't working
	// {
	// 	"keys": [" "],
	// 	"command": "set_motion",
	// 	"context": [{ "key": "setting.command_mode" }],
	// 	"args": [{
	// 		"inclusive": true,
	// 		"motion": "vi_move_to_brackets",
	// 		"motion_args": {
	// 			"repeat": 1
	// 		}
	// 	}]
	// }

	// From http://stackoverflow.com/questions/19746773/sublime-keymap-shiftspace-to-go-back-one-character-in-given-context
	// Not what I want, but maybe worth studying.
	// { "keys": ["shift+space"], "command": "move", "args": {"by": "characters", "forward": false}, "context":
 //    [
 //      { "key": "preceding_text", "operator": "regex_contains", "operand": "[)'\"\\}\\]>,\\;:]$", "match_all": true },
 //      { "key": "auto_complete_visible", "operator": "equal", "operand": false }
 //    ]
	// },
	// { "keys": ["shift+space"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
 //    [
 //      { "key": "following_text", "operator": "regex_contains", "operand": "^[)'\"\\}\\]>,\\;:]", "match_all": true },
 //      { "key": "auto_complete_visible", "operator": "equal", "operand": false }
 //    ]
	// },

	/* OPEN KEYS
	space
	shift+space
	l
	j
	,
	*/

	/* TODO
	- space[] for %
	- have } ignore white-space only lines and move to first non-whispace line
	- swap , and `
	- swap D with dd (you can use d$)
	*/

	/* Typescript */
	{
    "keys": ["super+shift+o"],
    "command": "typescript_quick_info_doc",
    "context": [
      { 
		    "key": "selector", 
			  "operator": "equal", 
				"operand": "source.ts, source.tsx, source.js, source.jsx" 
			}
    ]
  },
	{
    "keys": ["super+option+d"],
    "command": "typescript_go_to_definition",
    "context": [
      { 
		    "key": "selector", 
			  "operator": "equal", 
				"operand": "source.ts, source.tsx, source.js, source.jsx" 
			}
    ]
  },
	{
    "keys": ["super+option+r"],
    "command": "typescript_find_references",
    "context": [
      { 
		    "key": "selector", 
			  "operator": "equal", 
				"operand": "source.ts, source.tsx, source.js, source.jsx" 
			}
    ]
  },

  {
  	"keys": ["super+control+backspace"],
  	"command": "delete_current_file"
  },

  // https://packagecontrol.io/packages/JsPrettier
  { 
 		"keys": ["super+option+p"], "command": "js_prettier" 
  } 

]
